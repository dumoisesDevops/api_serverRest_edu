name: End-to-end API tests  # Nome do pipeline

on: push  # O pipeline será acionado em um push

jobs:
  api-tests:
    runs-on: ubuntu-latest  # Usando uma imagem do Ubuntu para rodar os testes de API

    strategy:
      matrix:
        test-file: [login/login.cy.js, produtos/produto.cy.js, usuario/usuario.cy.js]  # Arquivos de teste a serem executados em paralelo

    steps:
      - name: Checkout code  # Faz o checkout do repositório
        uses: actions/checkout@v4

      - name: Set up Node.js  # Configura Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Versão do Node.js a ser usada

      - name: Install dependencies  # Instala as dependências do projeto
        run: npm install

      - name: Run API test on ${{ matrix.test-file }}  # Roda os testes de API para o arquivo específico
        run: npm run test:api -- "cypress/e2e/${{ matrix.test-file }}"  # Correção aqui
      
      - name: Generate Allure report  # Gera o relatório Allure
        run: npm run allure:generate

      - name: Set artifact name  # Passo para definir o nome do artefato
        id: set_name
        run: |
          ARTIFACT_NAME=$(echo "${{ matrix.test-file }}" | sed 's/\//-/g')
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_ENV  # Salva a variável de ambiente

      - name: Upload Test Results as Artifact  # Faz o upload dos resultados dos testes
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}  # Agora, acessamos corretamente a variável de ambiente
          path: results/
